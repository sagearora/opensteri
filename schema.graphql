
enum order_direction {
    asc
    desc
}

input order_by {
    column: String!
    direction: order_direction!
}

type user {
    id: Int!
    name: String!
    pin: Int!
    created_at: String!
    updated_at: String!
    is_admin: Boolean!
    is_spore_tester: Boolean!
    is_active: Boolean!
}

input user_insert_input {
    name: String!
    pin: Int!
    is_active: Boolean!
    is_admin: Boolean!
    is_spore_tester: Boolean!
}

input user_set_input {
    name: String
    pin: Int
    is_active: Boolean
    is_admin: Boolean
    is_spore_tester: Boolean
}

type steri {
    id: Int!
    name: String!
    serial: String!
    created_at: String!
    updated_at: String!
    is_active: Boolean!
}

input steri_insert_input {
    name: String!
    serial: String!
    is_active: Boolean!
}

input steri_set_input {
    name: String
    serial: String
    is_active: Boolean
}

type steri_item {
    id: Int!
    name: String!
    category: String!
    is_active: Boolean!
    total_count: Int
    is_count_enabled: Boolean!
    created_at: String!
    updated_at: String!
}

input steri_item_insert_input {
    name: String!
    category: String!
    is_active: Boolean!
    total_count: Int
    is_count_enabled: Boolean!
}

input steri_item_set_input {
    name: String
    category: String
    is_active: Boolean
    total_count: Int
    is_count_enabled: Boolean
}

input steri_cycle_insert_input {
    steri_id: Int!
}

type steri_label {
    id: Int!
    created_at: String!
    updated_at: String!
    clinic_user_id: Int!
    clinic_user: user!
    steri_item_id: Int!
    steri_item: steri_item!
    expiry_at: String!
    steri_cycle_id: Int
    steri_cycle: steri_cycle
    steri_cycle_user_id: Int
    steri_cycle_user: user
    loaded_at: String
    skip_print: Boolean!
    appointment_id: String
    checkout_at: String
    next_label_id: Int
}

input steri_label_insert_input {
    steri_item_id: Int!
    expiry_at: String!
    skip_print: Boolean!
    clinic_user_id: Int!
}

input steri_label_set_input {
    steri_item_id: Int
    steri_cycle_id: Int
    steri_cycle_user_id: Int
    loaded_at: String
    skip_print: Boolean
    appointment_id: String
    checkout_at: String
    next_label_id: Int
}

type steri_label_mutation_response {
    affected_rows: Int!
    returning: [steri_label!]
}

type steri_item_category {
    name: String!
}

enum steri_cycle_status {
    loading
    running
    failed
    finished
}

enum spore_test_status {
    passed
    failed
}

type steri_cycle {
    id: Int!
    created_at: String!
    updated_at: String!
    steri_id: Int!
    cycle_number: Int!
    start_at: String
    start_user_id: Int
    start_user: user
    finish_at: String
    finish_user_id: Int
    finish_user: user
    notes: String
    status: steri_cycle_status!
    is_spore_test_enabled: Boolean!
    spore_test_user_id: Int
    spore_test_user: user
    spore_test_recorded_at: String
    spore_test_result: spore_test_status
    log_data: String
    steri: steri!
    steri_labels(offset: Int, limit: Int, order_by: order_by): [steri_label!]!
}

input steri_cycle_insert_input {
    cycle_number: Int!
    steri_id: Int!
    is_spore_test_enabled: Boolean!
}

input steri_cycle_set_input {
    cycle_number: Int
    steri_id: Int
    start_at: String
    start_user_id: Int
    finish_at: String
    finish_user_id: Int
    notes: String
    status: String
    is_spore_test_enabled: Boolean
    spore_test_user_id: Int
    spore_test_recorded_at: String
    spore_test_result: spore_test_status
    log_data: String
}

enum steri_label_event_type {
    add_steri_item
    remove_steri_item
    reprint
    update_steri_item_id
    checkout_steri_item
    undo_checkout
    print_replacement
}

input steri_label_event_insert_input {
    steri_label_id: Int!
    type: steri_label_event_type!
    data: String!
    user_id: Int!
    force_reprint: Boolean
}

input steri_label_where {
    appointment_id: String
}

type Query {
    user(limit: Int, offset: Int, order_by: [order_by!]): [user!]
    user_by_pk(id: Int!): user
    user_by_pin(pin: Int!): user
    steri(limit: Int, offset: Int, order_by: [order_by!]): [steri!]
    steri_by_pk(id: Int!): steri
    steri_item(limit: Int, offset: Int, order_by: [order_by!]): [steri_item!]
    steri_item_by_pk(id: Int!): steri_item
    steri_item_category: [steri_item_category!]
    steri_label(limit: Int, where: steri_label_where offset: Int, order_by: [order_by!]): [steri_label!]
    steri_cycle_by_pk(id: Int!): steri_cycle
    steri_cycle(limit: Int, offset: Int, order_by: [order_by!]): [steri_cycle!]
    pending_spore_test: [steri_cycle!]
}

type Mutation {
    insert_user_one(object: user_insert_input!): user
    update_user(id: Int!, set: user_set_input!): user
    insert_steri_one(object: steri_insert_input!): steri
    update_steri(id: Int!, set: steri_set_input!): steri
    insert_steri_item_one(object: steri_item_insert_input!): steri_item
    update_steri_item(id: Int!, set: steri_item_set_input!): steri_item
    insert_steri_label(objects: [steri_label_insert_input!]!): steri_label_mutation_response
    update_steri_label_by_pk(id: Int!, set: steri_label_set_input!): steri_label
    insert_steri_label_event(objects: [steri_label_event_insert_input!]!): steri_label_mutation_response
    insert_steri_cycle_one(object: steri_cycle_insert_input!): steri_cycle
    update_steri_cycle_by_pk(id: Int!, set: steri_cycle_set_input!): steri_cycle
}
